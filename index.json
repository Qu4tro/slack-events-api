{"repository_name":"github.com/Qu4tro/slack-events-api","body":"# Slack Events API adapter for Crystal\n\n[![Build Status](https://travis-ci.com/Qu4tro/slack-events-api.svg?token=Mqsa3fKeSUryp43kNdBt&branch=master)](https://travis-ci.com/Qu4tro/slack-events-api)\n\n[![Github release](https://img.shields.io/github/release/qu4tro/slack-events-api.svg)](https://github.com/qu4tro/slack-events-api/releases)\n\n### The middlewares you need to deal with Slack Events API\n\n## Overview\n\nslack-events-api is a [Crystal](https://crystal-lang.org/) package composed of two middlewares:\n\n`SlackEvents::VerificationHandler`\n  - Middleware that verifies that requests are correctly signed with `SLACK_SIGNING_SECRET` by Slack. All requests going through this middleware, will be checked. In the event of a request whose signature couldn't be verified, the middleware will early return with a `403 - Forbidden`.\n  - Receives `SLACK_SIGNING_SECRET` as its sole argument.\n\n\n`SlackEvents::ChallengeHandler`\n  - Middleware that does the initial challenge handshake between Slack and your API.\n  \nFurther documentation can be found in https://qu4tro.github.io/slack-events-api/\n\n## Installation\n\n1. Add this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  slack-events-api:\n    github: qu4tro/slack-events-api\n```\n2. Run `shards install`\n\n\n## Usage\nThis example will suffice to perform the initial setup, but actual events will be 404'd, until you write your application-specific handler.\n\n```crystal\n#!/usr/bin/env crystal\n\nrequire \"http/server\"\nrequire \"http/server/handler\"\n\nrequire \"slack-events-api\"\n\nmiddlewares = [\n  HTTP::LogHandler.new.as(HTTP::Handler),\n  HTTP::ErrorHandler.new,\n  SlackEvents::VerificationHandler.new(ENV[\"SLACK_SIGNING_SECRET\"]),\n  SlackEvents::ChallengeHandler.new,\n] \n\nHTTP::Server.new(middlewares).tap do |server|\n  address = server.bind_tcp \"localhost\", ENV[\"PORT\"].to_i\n  puts \"Listening on http://#{address}\"\n  server.listen\nend\n```\n## Further work\n\n- Make JSON mappings for all event types supported by the Event API \n- If a reverse-proxy middleware comes up for Crystal, I think it's worth thinking about creating a docker image, to allow for the verification and challenge-setup to be automated for any ad-hoc server.\n\n\n## Development\n\nAny restriction to development should be tool-automated.\nSo, feel free to open PRs. If all the tests pass, it should be good to merge, if it fits the package domain - opening an issue is a good way to clarify. In fact, feel free to open issues for any type of clarification.\n\n\n## Contributing\n\n1. [Fork it](https://github.com/Qu4tro/slack-events-api/fork)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n\n## Authors\n\n* **Xavier Francisco** - *Initial work* - [Qu4tro](https://github.com/Qu4tro)\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n","program":{"html_id":"github.com/Qu4tro/slack-events-api/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/Qu4tro/slack-events-api","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/Qu4tro/slack-events-api/SlackEvents","path":"SlackEvents.html","kind":"module","full_name":"SlackEvents","name":"SlackEvents","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"slack-events-api/challenge_handler.cr","line_number":8,"url":"https://github.com/Qu4tro/slack-events-api/blob/a2bec3277c0f3ff52e0033a4eac26c4fa9daaad4/src/slack-events-api/challenge_handler.cr"},{"filename":"slack-events-api/verification_handler.cr","line_number":8,"url":"https://github.com/Qu4tro/slack-events-api/blob/a2bec3277c0f3ff52e0033a4eac26c4fa9daaad4/src/slack-events-api/verification_handler.cr"}],"repository_name":"github.com/Qu4tro/slack-events-api","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Slack signs its requests using a secret that's unique to your app.\nWith the help of signing secrets,\nyour app can more confidently verify whether requests from us are authentic.","summary":"<p>Slack signs its requests using a secret that's unique to your app.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/Qu4tro/slack-events-api/SlackEvents/ChallengeHandler","path":"SlackEvents/ChallengeHandler.html","kind":"class","full_name":"SlackEvents::ChallengeHandler","name":"ChallengeHandler","abstract":false,"superclass":{"html_id":"github.com/Qu4tro/slack-events-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/Qu4tro/slack-events-api/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/Qu4tro/slack-events-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/Qu4tro/slack-events-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"slack-events-api/challenge_handler.cr","line_number":21,"url":"https://github.com/Qu4tro/slack-events-api/blob/a2bec3277c0f3ff52e0033a4eac26c4fa9daaad4/src/slack-events-api/challenge_handler.cr"}],"repository_name":"github.com/Qu4tro/slack-events-api","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/Qu4tro/slack-events-api/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Qu4tro/slack-events-api/SlackEvents","kind":"module","full_name":"SlackEvents","name":"SlackEvents"},"doc":"Middleware that does the initial challenge handshake with Slack.\nIt always need to be used with and after `SlackEvents::VerificationHandler`.","summary":"<p>Middleware that does the initial challenge handshake with Slack.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":"Requests that go through this middleware either:\nAre challenges - and the correct response is returned\nAre some other event - and the middleware does nothing","summary":"<p>Requests that go through this middleware either: Are challenges - and the correct response is returned Are some other event - and the middleware does nothing</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/Qu4tro/slack-events-api/blob/a2bec3277c0f3ff52e0033a4eac26c4fa9daaad4/src/slack-events-api/challenge_handler.cr#L27","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"challenge = get_challenge(context.request)\nif challenge == nil\n  return call_next(context)\nend\ncontext.response.status_code = 200\ncontext.response.content_type = \"text/plain\"\ncontext.response.print(challenge)\n"}}],"macros":[],"types":[]},{"html_id":"github.com/Qu4tro/slack-events-api/SlackEvents/VerificationHandler","path":"SlackEvents/VerificationHandler.html","kind":"class","full_name":"SlackEvents::VerificationHandler","name":"VerificationHandler","abstract":false,"superclass":{"html_id":"github.com/Qu4tro/slack-events-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/Qu4tro/slack-events-api/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/Qu4tro/slack-events-api/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/Qu4tro/slack-events-api/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"slack-events-api/verification_handler.cr","line_number":10,"url":"https://github.com/Qu4tro/slack-events-api/blob/a2bec3277c0f3ff52e0033a4eac26c4fa9daaad4/src/slack-events-api/verification_handler.cr"}],"repository_name":"github.com/Qu4tro/slack-events-api","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/Qu4tro/slack-events-api/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Qu4tro/slack-events-api/SlackEvents","kind":"module","full_name":"SlackEvents","name":"SlackEvents"},"doc":"Middleware that verifies that requests are correctly signed with `SLACK_SIGNING_SECRET` by Slack.","summary":"<p>Middleware that verifies that requests are correctly signed with <code>SLACK_SIGNING_SECRET</code> by Slack.</p>","class_methods":[],"constructors":[{"id":"new(signing_secret:String)-class-method","html_id":"new(signing_secret:String)-class-method","name":"new","doc":"Initialize with the unique string Slack creates for your app.\nVerify requests from Slack with confidence by verifying signatures\nusing your signing secret.","summary":"<p>Initialize with the unique string Slack creates for your app.</p>","abstract":false,"args":[{"name":"signing_secret","doc":null,"default_value":"","external_name":"signing_secret","restriction":"String"}],"args_string":"(signing_secret : String)","source_link":"https://github.com/Qu4tro/slack-events-api/blob/a2bec3277c0f3ff52e0033a4eac26c4fa9daaad4/src/slack-events-api/verification_handler.cr#L16","def":{"name":"new","args":[{"name":"signing_secret","doc":null,"default_value":"","external_name":"signing_secret","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(signing_secret)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":"Requests that go through this middleware need to have a valid signature\nor are a '403 - Forbidden' will be returned to the client.","summary":"<p>Requests that go through this middleware need to have a valid signature or are a '403 - Forbidden' will be returned to the client.</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/Qu4tro/slack-events-api/blob/a2bec3277c0f3ff52e0033a4eac26c4fa9daaad4/src/slack-events-api/verification_handler.cr#L21","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if valid?(context.request)\nelse\n  return forbidden(context)\nend\ncall_next(context)\n"}},{"id":"computed_signature(request)-instance-method","html_id":"computed_signature(request)-instance-method","name":"computed_signature","doc":"With the help of HMAC SHA256 - `OpenSSL::HMAC` hash the basestring,\nusing the Slack Signing Secret - `@signing_secret` - as the key.","summary":"<p>With the help of HMAC SHA256 - <code>OpenSSL::HMAC</code> hash the basestring, using the Slack Signing Secret - <code>@signing_secret</code> - as the key.</p>","abstract":false,"args":[{"name":"request","doc":null,"default_value":"","external_name":"request","restriction":""}],"args_string":"(request)","source_link":"https://github.com/Qu4tro/slack-events-api/blob/a2bec3277c0f3ff52e0033a4eac26c4fa9daaad4/src/slack-events-api/verification_handler.cr#L60","def":{"name":"computed_signature","args":[{"name":"request","doc":null,"default_value":"","external_name":"request","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"v0=\" + (OpenSSL::HMAC.hexdigest(:sha256, @signing_secret, basestring(request)))"}},{"id":"valid_age?(request)-instance-method","html_id":"valid_age?(request)-instance-method","name":"valid_age?","doc":"The signature depends on the timestamp to protect against replay attacks.\nCheck to make sure that the request occurred recently.\nNOTE: The package defaults to accepting timestamps that\nare within 5 minutes of the current time.\ni.e. It can be either from 3 minutes ago or 3 minutes from now.","summary":"<p>The signature depends on the timestamp to protect against replay attacks.</p>","abstract":false,"args":[{"name":"request","doc":null,"default_value":"","external_name":"request","restriction":""}],"args_string":"(request)","source_link":"https://github.com/Qu4tro/slack-events-api/blob/a2bec3277c0f3ff52e0033a4eac26c4fa9daaad4/src/slack-events-api/verification_handler.cr#L49","def":{"name":"valid_age?","args":[{"name":"request","doc":null,"default_value":"","external_name":"request","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"req_ts = Time.unix((timestamp(request.headers)).to_i)\nnow_ts = Time.utc_now\nage = now_ts - req_ts\nage.duration < Time::Span.new(hours: 0, minutes: 5, seconds: 0)\n"}},{"id":"valid_signature?(request)-instance-method","html_id":"valid_signature?(request)-instance-method","name":"valid_signature?","doc":"Compare this computed signature to the X-Slack-Signature header on the request.","summary":"<p>Compare this computed signature to the X-Slack-Signature header on the request.</p>","abstract":false,"args":[{"name":"request","doc":null,"default_value":"","external_name":"request","restriction":""}],"args_string":"(request)","source_link":"https://github.com/Qu4tro/slack-events-api/blob/a2bec3277c0f3ff52e0033a4eac26c4fa9daaad4/src/slack-events-api/verification_handler.cr#L40","def":{"name":"valid_signature?","args":[{"name":"request","doc":null,"default_value":"","external_name":"request","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(computed_signature(request)) == request.headers[\"X-Slack-Signature\"]?"}}],"macros":[],"types":[]}]}]}}